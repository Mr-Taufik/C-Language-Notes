///指针和数组的区别
/*
#include <stdio.h>

int main()
{
	char str[32] = "helloworld";///这里面是一个数组的形式，可读可写，存放在栈空间，一共32字节，实际使用了11字节
	///固定大小：数组的大小固定为32字节，无法动态改变。
	char* p = "helloworld";
	///下面这个指针p是存放在栈空间的，里面有8个字节，储存的是后面字符串的地址，后面的字符串存放在只读数据区里面
	///只读：尝试修改通过 p 指向的字符串内容会导致未定义行为，通常会引发运行时错误（如段错误）
	/// 可修改指针：可以修改 p 本身，使其指向不同的位置，但不能修改其指向的内容
	//str++;

	///str 是一个数组名，代表数组的起始地址，但在表达式中，
	///数组名会被隐式转换为指向其第一个元素的指针
	/// 数组名本身是一个不可修改的左值，不能被递增或赋值。因此，str++ 会导致编译错误
	p++;
	///p++ 将指针 p 移动到下一个字符的位置，这是合法的操作。例如，p 原本指向 'h'，执行 p++ 后将指向 'e'

	char* const q = "helloworld";
	//q++;   前面这里的p被const修饰了，所以不可以修改地址

	str[0] = 'x';///这里可以被修改，就是把h改为x
	//p[0] = 'x';  ///字符串常量，不能被修改

	printf("%lu\n", sizeof(str));  //长度为32
	printf("%lu\n", sizeof(p));    // 指针长度为8

	return 0;
}
*/

#include <stdio.h>

void f(int a[])
{
	//数组名作为参数传过来后，变成指针
	printf("%d\n", sizeof(a) / sizeof(a[0]));
	//传过来以后a就变成指针了，这里就不可以通过sizeof去求数组长度了
}

int main()
{
	int a[10] = { 0 };

	printf("%d\n", sizeof(a) / sizeof(a[0]));

	f(a);

	return 0;

}
