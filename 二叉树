#include <stdio.h>
#include <stdlib.h>

// 定义二叉树节点
typedef struct Node {
    int data;
    struct Node *left;
    struct Node *right;
} Node;

// 创建新节点
Node* create_node(int data) {
    Node* new_node = (Node*) malloc(sizeof(Node));
    if(!new_node) {
        printf("内存分配失败\n");
        exit(1);
    }
    new_node->data = data;
    new_node->left = new_node->right = NULL;
    return new_node;
}

// 递归中序遍历
void inorder_traversal(Node* root) {
    if(root == NULL) return;
    inorder_traversal(root->left);
    printf("%d ", root->data);
    inorder_traversal(root->right);
}

int main() {
    /*
        构建以下二叉树：
               1
             /   \
            2     3
           / \   /
          4   5 6
    */
    Node* root = create_node(1);
    root->left = create_node(2);
    root->right = create_node(3);
    root->left->left = create_node(4);
    root->left->right = create_node(5);
    root->right->left = create_node(6);

    printf("中序遍历结果：");
    inorder_traversal(root);
    printf("\n");

    // 释放内存（略）
    return 0;
}
