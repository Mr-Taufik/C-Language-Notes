#include <stdio.h>

int main()
{
	int a[5] = { 1, 2, 3, 4, 5 };

	int* p1 = (int*)(&a + 1);
	int* p2 = (int*)((int)a + 1);
	int* p3 = (int*)(a + 1);

}


&a + 1：

指针算术运算： 给指针 &a 加上 1。
效果： 将指针移动到整个数组的下一个位置。
计算： 如果 a 的起始地址为 base，则 &a + 1 指向 base + sizeof(a) = base + 20 字节（假设 int 为 4 字节）。
强制类型转换为 int*：

结果指针： p1 指向 base + 20，即数组末尾的下一个地址。

p2 就是先把地址a给转换成整数，也就是1，然后1+1=2. 再把它强转为地址，所以*p2 = 2


